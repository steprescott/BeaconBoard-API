<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#         	 
	var code = new CodeGenerationTools(this) { FullyQualifySystemTypes = true, CamelCaseFields = false };
	var loader = new MetadataLoader(this);
 
	var sourceCsdlPath = FindEdmxFileName();
	//If there is no Csdl to be seen, then do as Romans do and do nothing ;)
	if (sourceCsdlPath != null)
	{
		var namespaceName = code.VsNamespaceSuggestion();
		var itemCollection = loader.CreateEdmItemCollection(sourceCsdlPath, new string[] {});
		var container = itemCollection.GetItems<EntityContainer>().FirstOrDefault();
		var entities = itemCollection.GetItems<EntityType>().OrderBy(e => e.Name).ToList();
		var entitiesContextName = container.Name;
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
 
namespace <#= namespaceName #>
{
	public class UnitOfWork : IDisposable
	{
		/// <summary>
        /// Used to denote whether a connection has been disposed of
        /// </summary>
        private bool _disposed;

        /// <summary>
        /// Connection to the database
        /// </summary>
        private readonly <#= entitiesContextName #> _applicationEntities;

		/// <summary>
        /// Base constructor that will create the database context/ connection
        /// </summary>
        public UnitOfWork()
        {
            _applicationEntities = new <#= entitiesContextName #>();
        }
		
		/// <summary>
        /// Saves any changes back to the database for objects that might have changed
        /// </summary>
        public void SaveChanges()
        {
            _applicationEntities.SaveChanges();
        }

        /// <summary>
        /// Used for implementing the IDisposable so the connection can be used in a 
        /// 'using' context
        /// </summary>
        protected virtual void DisposeContext()
        {
            if (!_disposed)
            {
                _applicationEntities.Dispose();
            }
            _disposed = true;
        }

        /// <summary>
        /// Used for disposing of the connection outside a 'using' context
        /// </summary>
        public void Dispose()
        {
            DisposeContext();
            GC.SuppressFinalize(this);
        }
		
		/// <summary>
        /// Repositories that allows access to their entity
        /// </summary><#
		foreach (EntityType entity in entities)
		{        
			string entityName = string.Concat(entity.Name, "Repository");
			string entityPrivateName = string.Concat("_", entity.Name.ToLower(), "Repository");
		#>		
		private <#= entityName #> <#= entityPrivateName #>;
        public <#= entityName #> <#= entityName #>
        {
            get
            {
                if (<#= entityPrivateName #> == null)
                {
                    <#= entityPrivateName #> = new <#= entityName #>(_applicationEntities);
                }
                return <#= entityPrivateName #>;
            }
        }
		<# } #>
	
	}	

	/// <summary>
    /// Various partial properties that allow the ability to add to via further parial functions
	/// later on
    /// </summary><#
	foreach (EntityType entity in entities)
	{        
		string entityName = string.Concat(entity.Name, "Repository");
		string entityPrivateName = string.Concat("_", entity.Name.ToLower(), "Repository");
	#>

	public partial class <#= entityName #> : GenericRepository<<#= entity.Name #>> 
	{
		public <#= entityName #>(DbContext dbContextEntities) : base(dbContextEntities) { }
	}
	<# 
	}        
	#>

}
<# } #>
<#+
 	private string FindEdmxFileName()
	{            
		string[] entityFrameworkFiles = Directory.GetFiles(Host.ResolvePath(string.Empty), "*.edmx");
		if(entityFrameworkFiles.Length > 0)
		{
			return entityFrameworkFiles[0];
		}
    
		return null;
	}
#>
